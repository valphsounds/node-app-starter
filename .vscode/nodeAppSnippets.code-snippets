{
	// Place your node-app-starter workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// JavaScript
	"Expressapp with MongoDB": {
		"prefix": "xmdb",
		"body": [
			"const express = require('express');",
			"const mongoose = require('mongoose');",
			"const app = express();",
			"const bp = require('body-parser');",
			"",
			"const PORT = process.env.NODE_DOCKER_PORT || $1;",
			"require('dotenv').config();",
			"const db = require('./config/db.config');",
			"",
			"mongoose.connect(db.url, {",
			"    useNewUrlParser: true, useUnifiedTopology: true",
			"});",
			"",
			"app.use(bp.json({limit: '50mb', type: 'application/json'}));",
			"app.use(bp.urlencoded({",
			"    parameterLimit: 100000,",
			"    limit: '50mb',",
			"    extended: false }));",
			"app.use(express.urlencoded({ extended: false }));",
			"app.use(express.json());",
			"",
			"app.set('view engine', 'ejs');",
			"app.use('/', express.static('views'));",
			"",
			"app.get('/', async (req, res) => {",
			"	res.render('index');",
			"});",
			"",
			"app.listen(PORT, () => {",
			"    console.log(`Listening on port \\${PORT}`);",
			"});"
		],
		"description": "Simple Express app with connection to mongodb."
	},
	"Connect Model File": {
		"prefix": "connectmodel",
		"body": [
			"const { $2 } = require('./models/$1');"
		],
		"description": "Connect Model File"
	},
	"Connect Routes File": {
		"prefix": "connectroutes",
		"body": [
			"const $1 = require('./routes/$1');"
		],
		"description": "Connect Routes File"
	},
	"App Use Routes": {
		"prefix": "appuseroute",
		"body": [
			"app.use('/api/$1', $1);"
		],
		"description": "App Use Connected Routes"
	},
	"Env File": {
		"prefix": "envfile",
		"body": [
			"NODE_MODE = 'LOCAL'",
			"DB_HOST = 'localhost'",
			"DB_PORT = '27017'",
			"DB_NAME = $1",
			"$1_jwtPrivateKey = $2",
		],
		"description": "Local .env-file"
	},
	"Database Config File": {
		"prefix": "dbconf",
		"body": [
			"const {",
			"  DB_USER,",
			"  DB_PASSWORD,",
			"  DB_HOST,",
			"  DB_PORT,",
			"  DB_NAME,",
			"  NODE_MODE,"
			"} = process.env;",
			"",
			"const connectionString = NODE_MODE === 'LOCAL' ? `\\${DB_HOST}:\\${DB_PORT}/\\${DB_NAME}` : `\\${DB_USER}:\\${DB_PASSWORD}@\\${DB_HOST}:\\${DB_PORT}/\\${DB_NAME}?authSource=admin`"
			"module.exports = {",
			"  url: `mongodb://\\${connectionString}`,",
			"};"
		],
		"description": "Config file for mongodb."
	},
	"JWT Config File": {
		"prefix": "jwtconf",
		"body": [
			"const { $1_jwtPrivateKey } = process.env;",
			"",
			"module.exports.token = `\\${$1_jwtPrivateKey}`;"
		],
		"description": "Config file for JSON web token."
	},
	"Auth Middleware": {
		"prefix": "authmw",
		"body": [
			"require('dotenv').config();",
			"const jwt = require('jsonwebtoken');",
			"const key = require('../config/jwt.config.js');",
			"",
			"module.exports = function (req, res, next) {",
			"    const token = req.header('x-auth-token');",
			"    if (!token) return res.status(401).send('Access denied. No token Provided.');",
			"    try",
			"    {",
			"        const decoded = jwt.verify(token, key.token);",
			"        req.user = decoded;",
			"        next();",
			"    }",
			"    catch (ex) {",
			"        res.status(400).send('Invalid token.')",
			"    }",
			"}"
		],
		"description": "Express middleware for authenticating users."
	},
	"User mongodb Model": {
		"prefix": "usermodel",
		"body": [
			"const mongoose = require('mongoose');",
			"const Joi = require('joi');",
			"const jwt = require('jsonwebtoken');",
			"const key = require('../config/jwt.config.js');",
			"",
			"const userSchema = new mongoose.Schema({",
			"    username: {",
			"        type: String,",
			"        required: true,",
			"        minlength: 5,",
			"        maxlength: 50",
			"    },",
			"    password: {",
			"        type: String,",
			"        required: true,",
			"        minlength: 5,",
			"        maxlength: 1024",
			"    },",
			"    isAdmin: Boolean",
			"});",
			"",
			"userSchema.methods.generateAuthToken = function() {",
			"    const token = jwt.sign({_id: this._id, isAdmin: this.isAdmin }, key.token);",
			"    return token;",
			"};",
			"",
			"const User = mongoose.model('User', userSchema);",
			"",
			"function validateUser(user) {",
			"    const schema = Joi.object({",
			"        username: Joi.string().min(5).max(50).required(),",
			"        password: Joi.string().min(5).max(255).required()",
			"    });",
			"",
			"    return schema.validate(user);",
			"}",
			"",
			"exports.User = User;",
			"exports.validate = validateUser;"
		],
		"description": "MongoDB model for a User with username and password"
	},
	"MongoDB Object Model": {
		"prefix": "dbobj",
		"body": [
			"const mongoose = require('mongoose');",
			"const Joi = require('joi');",
			"",
			"const $1Schema = new mongoose.Schema({",
			"    $3",
			"});"
			"",
			"const $2 = mongoose.model('$2', $1Schema);",
			"",
			"function validate$2($1) {",
			"    const schema = Joi.object({",
			"        ",
			"    });",
			"",
			"    return schema.validate($1);",
			"}",
			"",
			"exports.$2 = $2;",
			"exports.validate = validate$2;",
			"exports.$1Schema = $1Schema;"
		],
		"description": "MongoDB model for a new database object."
	},
	"Mongoose Schema Member": {
		"prefix": "mgsm",
		"body": [
			"$1: {",
			"    type: $2,",
			"    $3",
			"},"
		],
		"description": "Mongoose Schema Member"
	},
	"Moongoose Schema Required": {
		"prefix": "mgreq",
		"body": [
			"require: true,"
		],
		"description": "Moongoose Schema Required"
	},
	"JOI Schema Member": {
		"prefix": "joism",
		"body": [
			"$1: Joi.$2()$3,"
		],
		"description": "JOI Schema Member"
	},
	"MongoDB File Object": {
		"prefix": "dbfileobj",
		"body": [
			"const mongoose = require('mongoose');",
			"const Joi = require('joi');",
			"",
			"const $1Schema = new mongoose.Schema({",
			"    $1Name: {",
			"        type: String,",
			"        required: true",
			"    },",
			"    $1Url: {",
			"        type: String",
			"    }",
			"});"
			"",
			"const $2 = mongoose.model('$2', $1Schema);",
			"",
			"function validate$2($1) {",
			"    const schema = Joi.object({",
			"        $1Name: Joi.string().min(3).max(100).required(),",
			"        $1Url: Joi.string().min(3).max(250),",
			"    })",
			"",
			"    return schema.validate($1);",
			"}",
			"",
			"exports.$2 = $2;",
			"exports.validate = validate$2;",
			"exports.$1Schema = $1Schema;"
		],
		"description": "MongoDB model for a new database file object."
	},
	"Express Auth MongoDB routes": {
		"prefix": "xauth",
		"body": [
			"const bcrypt = require('bcrypt');",
			"const Joi = require('joi');",
			"const {User} = require('../models/user');",
			"const express = require('express');",
			"const router = express.Router();",
			"const bp = require('body-parser');",
			"",
			"router.use(bp.urlencoded({ extended: false }));",
			"router.use(bp.json());",
			"",
			"router.use(express.urlencoded({ extended: false }));",
			"router.use(express.json());",
			"",
			"router.post('/', async (req, res) => {",
			"    // 400",
			"    const { error } = validate(req.body);",
			"    if(error) return res.status(400).send(error.details[0].message);",
			"",
			"    let user = await User.findOne({ username: req.body.username });",
			"    if (!user) return res.status(400).send('Invalid username or password.');",
			"",
			"    const validPassword = await bcrypt.compare(req.body.password, user.password);",
			"    if(!validPassword) return res.status(400).send('Invalid username or password.');",
			"",
			"    const token = user.generateAuthToken();",
			"    res.send(token);",
			"});",
			"",
			"function validate(req) {",
			"    const schema = Joi.object({",
			"        username: Joi.string().min(3).max(50).required(),",
			"        password: Joi.string().min(5).max(255).required()",
			"    });",
			"",
			"    return schema.validate(req);",
			"}",
			"module.exports = router;"
		],
		"description": "Auth Routes file for mongodb using express"
	},
	"Express User MongoDB routes": {
		"prefix": "xuser",
		"body": [
			"const auth = require('../middleware/auth');",
			"const _ = require('lodash');",
			"const bcrypt = require('bcrypt');",
			"const {User, validate} = require('../models/user');",
			"const express = require('express');",
			"const router = express.Router();",
			"const bp = require('body-parser');",
			"",
			"router.use(bp.urlencoded({ extended: false }));",
			"router.use(bp.json());",
			"",
			"router.use(express.urlencoded({ extended: false }));",
			"router.use(express.json());",
			"",
			"router.get('/me', auth, async (req, res) => {",
			"    const user = await User.findById(req.user._id).select('-password');",
			"    res.send(user);",
			"});",
			"",
			"router.post('/', async (req, res) => {",
			"    // 400",
			"    const { error } = validate(req.body);",
			"    if(error) return res.status(400).send(error.details[0].message);",
			"",
			"    let user = await User.findOne({ username: req.body.username });",
			"    if (user) return res.status(400).send('User already registered.');",
			"",
			"    user = new User(_.pick(req.body, ['username', 'password']));",
			"    const salt = await bcrypt.genSalt(10);",
			"    user.password = await bcrypt.hash(user.password, salt);",
			"",
			"    await user.save();",
			"",
			"    const token = user.generateAuthToken();",
			"    res.header('x-auth-token', token).send(_.pick(user, ['_id', 'name', 'username']));",
			"});",
			"",
			"module.exports = router;"
		],
		"description": "User Routes file for mongodb using express"
	},
	"Express DB Object MongoDB routes": {
		"prefix": "xobj",
		"body": [
			"const auth = require('../middleware/auth');",
			"const {$2, validate} = require('../models/$1');",
			"const express = require('express');",
			"const router = express.Router();",
			"const bp = require('body-parser');",
			"",
			"router.use(bp.urlencoded({ extended: false }));",
			"router.use(bp.json());",
			"",
			"router.use(express.urlencoded({ extended: false }));",
			"router.use(express.json());",
			"",
			"router.get('/', async (req, res) => {",
			"    const $1 = await $2.find();",
			"    res.send($1);",
			"});",
			"",
			"router.post('/', auth, async (req, res) => {",
			"    // 400",
			"    const { error } = validate(req.body);",
			"    if(error) return res.status(400).send(error.details[0].message);",
			"",
			"    const $1 = new $2({",
			"        ",
			"    });",
			"",
			"    await $1.save();",
			"",
			"    res.send($1);",
			"});",
			"",
			"router.put('/:id', auth, async (req, res) => {",
			"    // 400",
			"    const { error } = validate(req.body);",
			"    if(error) return res.status(400).send(error.details[0].message);",
			"",
			"    const $1 = await $2.findByIdAndUpdate(req.params.id, {",
			"        ",
			"    }, {",
			"        new: true",
			"    });",
			"",
			"    //404",
			"    if(!$1) return res.status(404).send('No such $1');",
			"",
			"    res.send($1);",
			"});",
			"",
			"router.delete('/:id', auth, async (req, res) => {",
			"    const $1 = await $2.findByIdAndRemove(req.params.id);",
			"    //404",
			"    if(!$1) return res.status(404).send('No such $1');",
			"",
			"    res.send($1);",
			"});",
			"",
			"router.get('/:id', auth, async (req, res) => {",
			"    const $1 = await $2.findById(req.params.id);",
			"    //404",
			"    if(!$1) return res.status(404).send('No such $1');",
			"",
			"    res.send($1);",
			"});",
			"",
			"module.exports = router;"
		],
		"description": "DB Object Routes file for mongodb using express"
	},
	"Express DB Object member": {
		"prefix": "xobjmem",
		"body": [
			"$1: req.body.$1,"
		],
		"description": "Member of Object in mongodb using express."
	},
	"Express File Object MongoDB routes": {
		"prefix": "xfile",
		"body": [
			"const auth = require('../middleware/auth');",
			"const { $2 } = require('../models/$1');",
			"const router = express.Router();",
			"const bp = require('body-parser');",
			"",
			"const multer = require('multer');",
			"const storage = multer.diskStorage({ ",
			"    destination: function(req, file, cb) { ",
			"       cb(null, './views/$3');",
			"    },",
			"    filename: function (req, file, cb) {",
			"       cb(null , file.originalname);",
			"    }",
			"});",
			"const upload = multer({ storage: storage });",
			"const fs = require('fs');",
			"",
			"router.use(bp.urlencoded({ extended: false }));",
			"router.use(bp.json());",
			"",
			"router.use(express.urlencoded({ extended: false }));",
			"router.use(express.json());",
			"",
			"router.post('/', auth, upload.single('myFile'), async (req, res) => {",
			"    fs.renameSync(`./views/$3/${req.file.filename}`, `./views/$3/${req.file.originalname}`);",
			"    try {",
			"        await $2.create({",
			"          $1Name: req.body.$1Name,",
			"          $1Url: `./$3/${req.file.originalname}`,",
			"        });",
			"        res.status(200).send('OK!');",
			"      } catch (error) {",
			"        res.json({",
			"          error,",
			"        });"
			"      }",
			"});",
			"",
			"router.delete('/:id', auth, async (req, res) => {",
			"    const $1 = await $2.findByIdAndRemove(req.params.id);",
			"    //404",
			"    if(!$1) return res.status(404).send('No such $1');",
			"",
			"    fs.rmSync($1.$1Url.replace('.', './views'));",
			"",
			"    res.send($1);",
			"});",
			"",
			"module.exports = router;"
		],
		"description": "File Object Routes file for mongodb using express"
	},

	// HTML
	"Starter HTML file": {
		"prefix": "htmlstart",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"    <meta charset=\"UTF-8\">",
			"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"    <link rel=\"stylesheet\" href=\"style.css\">",
			"    <title>$1</title>",
			"</head>",
			"<body>",
			"    <h1>$1</h1>",
			"    ",
			"    <script src=\"$2.js\"></script>",
			"</body>",
			"</html>"
		],
		"description": "HTML file starter with connected style.css and main.js"
	}
}